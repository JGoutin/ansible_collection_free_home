---

# Workaround: https://github.com/ansible/ansible/issues/10374
- name: Get static role path
  set_fact:
    nexcloud_role_path: "{{ role_path }}"

- name: Get Nextcloud config file information
  stat:
    path: /var/www/nextcloud/config/config.php
  register: _config_php

- name: Ensure Nextcloud user is present
  user:
    name: nextcloud

- name: Ensure Nextcloud var directory is present
  file:
    path: /var/lib/nextcloud
    mode: 0755
    setype: var_lib_t
    state: directory

- name: Ensure PostgreSQL is installed
  include_role:
    name: jgoutin.home.postgresql
  vars:
    postgresql_database: nextcloud
    postgresql_user: nextcloud
    postgresql_data: /var/lib/nextcloud/pgsql

- name: Ensure PHP-FPM is installed
  include_role:
    name: jgoutin.home.php_fpm
  vars:
    php_fpm_user: nextcloud
    php_fpm_site: nextcloud
    php_fpm_inaccessible_paths: /var/lib/nextcloud/pgsql
    php_memory_limit: "{{ nextcloud_upload_max_size }}"
    php_upload_max_filesize: "{{ nextcloud_upload_max_size }}"
    # PHP modules details:
    # Natively include: bz2, ctype, curl, dom, exif, fileinfo, ftp, iconv,
    #                   openssl, session, zlib
    # "cli" include: pcntl
    # "process" include: posix
    # "xml" include: libxml, XMLReader, XMLWriter, XMLReader
    # "mysqlnd": MySQL/MariaDB connector
    # "pgsql": PostgreSQL connector
    php_modules: [apcu, bcmath, cli, gd, gmp, imagick, intl, json, ldap,
                  mbstring, pgsql, redis, zip, process, smbclient, xml]

- name: Ensure Redis is installed
  include_role:
    name: jgoutin.home.redis
  vars:
    redis_user: nextcloud

- name: Ensure Nginx is installed
  include_role:
    name: jgoutin.home.nginx
  vars:
    nginx_server_name: "{{ nextcloud_domain }}"
    nginx_site: nextcloud
    nginx_site_user: nextcloud
    nginx_site_conf: "{{ nexcloud_role_path }}/files/nginx-site-nextcloud.j2"
    nginx_php_fpm: true
    nginx_can_network_connect: true
    nginx_can_use_cifs: "{{ 'files_external' in nextcloud_applications }}"
    nginx_can_use_fusefs: "{{ 'files_external' in nextcloud_applications }}"
    nginx_can_sendmail: true
    nginx_can_use_gpg: "{{ 'mail' in nextcloud_applications }}"
    nginx_can_connect_ldap: "{{ 'user_ldap' in nextcloud_applications }}"
    nginx_read_user_content: true
    nginx_unified: "{{ nextcloud_allow_web_update | bool }}"
    nginx_security_header_referrer_policy: true
    nginx_security_header_x_content_type_options: true
    nginx_security_header_x_download_options: true
    nginx_security_header_x_frame_options: true
    nginx_security_header_x_permitted_cross_domain_policies: true
    nginx_security_header_x_xss_protection: true
    nginx_inaccessible_paths: /var/www/nextcloud/config /var/lib/nextcloud

- name: Ensure ClamAV is installed
  include_role:
    name: jgoutin.home.clamav
  when: '"files_antivirus" in nextcloud_applications'

- name: Get TURN credentials from Nextcloud if any
  command: /usr/bin/php occ -n config:app:get spreed turn_servers
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  failed_when: false
  changed_when: false
  register: _coturn_secret
  when: '"spreed" in nextcloud_applications'

- name: Set TURN credentials as fact
  set_fact:
    nextcloud_coturn_secret: "{{ ((_coturn_secret.stdout | trim() != '') |
                              ternary(_coturn_secret.stdout, [{'secret': lookup('password', '/dev/null chars=ascii_lowercase,digits length=32')}] | to_json) | from_json)[0]['secret'] }}"
  when: '"spreed" in nextcloud_applications'

- name: Ensure CoTURN is installed
  include_role:
    name: jgoutin.home.coturn
  vars:
    coturn_realm: "{{ nextcloud_domain }}"
    coturn_static_auth_secret: "{{ nextcloud_coturn_secret }}"
    coturn_firewalld_zone: "{{ nginx_firewalld_source is defined | ternary('nginx', 'public') }}"
    coturn_tls_certificate: "{{ nginx_ssl_certificate | default(omit) }}"
    coturn_tls_certificate_key: "{{ nginx_ssl_certificate_key | default(omit) }}"
  when: '"spreed" in nextcloud_applications'

- name: Ensure RpmFusion-free repository is installed
  include_role:
    name: jgoutin.home.rpmfusion
  vars:
    rpmfusion_free: true  # Required for "ffmpeg"

- name: Ensure other Nextcloud requirements are installed
  dnf:
    state: present
    name:
      # For OCC command auto-completion
      - bash-completion
      # If not already installed by "common" role
      - fail2ban
      # For files preview generation
      - ffmpeg
      - libreoffice
    install_weak_deps: false
  retries: 10
  delay: 1

- name: Ensure temporary directory is present
  tempfile:
    state: directory
  register: _tmp_dir
  tags: molecule-idempotence-notest

- name: Ensure httpd access SELinux module is present
  copy:
    src: httpd_nextcloud.te
    dest: "{{ _tmp_dir.path }}/httpd_nextcloud.te"
  tags: molecule-idempotence-notest

- name: Ensure httpd access SELinux module is activated
  command: "{{ item }}"
  with_items:
    - checkmodule -M -m -o httpd_nextcloud.mod httpd_nextcloud.te
    - semodule_package -o httpd_nextcloud.pp -m httpd_nextcloud.mod
    - semodule -i httpd_nextcloud.pp
  args:
    chdir: "{{ _tmp_dir.path }}"
  changed_when: false
  tags:
    - molecule-notest
    - molecule-idempotence-notest

- name: Ensure Nextcloud server archive is present and match checksum
  get_url:
    url: https://download.nextcloud.com/server/releases/latest.tar.bz2
    dest: "{{ _tmp_dir.path }}/latest.tar.bz2"
    checksum: "sha256:https://download.nextcloud.com/server/releases/\
               latest.tar.bz2.sha256"
  retries: 10
  delay: 1
  when: not _config_php.stat.exists

- name: Ensure Nextcloud server archive signature is present
  get_url:
    url: https://download.nextcloud.com/server/releases/latest.tar.bz2.asc
    dest: "{{ _tmp_dir.path }}/latest.tar.bz2.asc"
  retries: 10
  delay: 1
  when: not _config_php.stat.exists

- name: Ensure Nextcloud GPG public key is present
  get_url:
    url: https://nextcloud.com/nextcloud.asc
    dest: "{{ _tmp_dir.path }}/nextcloud.asc"
  retries: 10
  delay: 1
  when: not _config_php.stat.exists

- name: Ensure Nextcloud GPG public key is imported
  command: "gpg2 --import {{ _tmp_dir.path }}/nextcloud.asc"
  changed_when: false
  when: not _config_php.stat.exists

- name: Ensure Nextcloud server archive signature is valid
  command: "gpg2 --verify {{ _tmp_dir.path }}/latest.tar.bz2.asc
            {{ _tmp_dir.path }}/latest.tar.bz2"
  changed_when: false
  when: not _config_php.stat.exists

- name: Ensure Ansible "tar" requirement is installed
  dnf:
    state: present
    name: tar
    install_weak_deps: false
  retries: 10
  delay: 1
  notify: Clean up Ansible "tar" requirement
  when: not _config_php.stat.exists
  tags: molecule-idempotence-notest

- name: Ensure Ansible "bzip2" requirement is installed
  dnf:
    state: present
    name: bzip2
    install_weak_deps: false
  retries: 10
  delay: 1
  notify: Clean up Ansible "bzip2" requirement
  when: not _config_php.stat.exists
  tags: molecule-idempotence-notest

- name: Ensure Nextcloud server files are present
  unarchive:
    src: "{{ _tmp_dir.path }}/latest.tar.bz2"
    dest: /var/www/
    remote_src: true
    owner: nextcloud
    group: nextcloud
    mode: 0750
  when: not _config_php.stat.exists

- name: Ensure temporary directory is absent
  file:
    path: "{{ _tmp_dir.path }}"
    state: absent
  when: _tmp_dir.path is defined

- name: Ensure Nextcloud data directory is present
  file:
    path: /var/lib/nextcloud/data
    owner: nextcloud
    group: nextcloud
    mode: 0750
    setype: httpd_sys_rw_content_t
    recurse: true
    state: directory
  tags: molecule-idempotence-notest  # Fail with SELinux context

- name: Ensure Nextcloud log directory is present
  file:
    path: /var/log/nextcloud
    owner: nextcloud
    group: nextcloud
    mode: 0750
    setype: httpd_log_t
    recurse: true
    state: directory
  tags: molecule-idempotence-notest  # Fail with SELinux context

- name: Ensure Web server have write permissions on Nextcloud directories
  file:
    path: "/var/www/nextcloud/{{ item.name }}"
    owner: nextcloud
    group: nextcloud
    mode: 0750
    setype: httpd_sys_rw_content_t
    recurse: "{{ item.is_dir | default(true) }}"
  with_items:
    - name: apps
    - name: config
    - name: data
    - name: 3rdparty/aws/aws-sdk-php/src/data/logs
    - name: .htaccess
      is_dir: false
    - name: .user.ini
      is_dir: false
  tags: molecule-idempotence-notest  # Fail with SELinux context

- name: Ensure Nextcloud cron and update services units are present
  copy:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
  with_items:
    - nextcloud_cron.service
    - nextcloud_cron.timer
    - nextcloud_update.service
    - nextcloud_update.timer

- name: Ensure Fail2ban configuration directory is present
  file:
    path: /etc/fail2ban/filter.d
    state: directory

- name: Ensure Nextcloud Fail2ban jail is configured
  copy:
    src: "{{ item.src }}"
    dest: "/etc/fail2ban/{{ item.dst }}"
  with_items:
    - src: fail2ban_filter.conf
      dst: filter.d/nextcloud.conf
    - src: fail2ban_jail.local
      dst: filter.d/jail.local

- name: Ensure services are restarted
  systemd:
    name: "{{ item }}"
    state: restarted
    daemon_reload: true
  changed_when: false
  with_items:
    - php-fpm
    - nginx
    - fail2ban

- name: Ensure Nextcloud is installed
  command: '/usr/bin/php occ -n maintenance:install
            --database "pgsql"
            --database-host "/var/run/postgresql"
            --database-name "nextcloud"
            --database-user "nextcloud"
            --database-pass ""
            --admin-user "{{ nextcloud_admin_user }}"
            --admin-pass "{{ nextcloud_admin_password }}"
            --data-dir "/var/lib/nextcloud/data"'
  args:
    chdir: /var/www/nextcloud/
    creates: /var/www/nextcloud/config/config.php
  become: true
  become_user: nextcloud

- name: Ensure Nextcloud configuration is set
  command: '/usr/bin/php occ -n config:system:set {{ item.name }}
            --value="{{ item.value }}"
            --type={{ item.type | default("string") }}'
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  changed_when: false
  when: item.when | default(true)
  with_items:
    - name: trusted_domains 1
      value: "{{ nextcloud_domain }}"
    - name: redis host
      value: /var/run/redis/redis.sock
    - name: redis port
      value: 0
      type: integer
    - name: memcache.local
      value: \OC\Memcache\APCu
    - name: memcache.distributed
      value: \OC\Memcache\Redis
    - name: memcache.locking
      value: \OC\Memcache\Redis
    - name: logfile
      value: /var/log/nextcloud/nextcloud.log
    - name: twofactor_enforced
      value: "{{ nextcloud_twofactor_enforced | string | lower }}"
    - name: token_auth_enforced
      value: "{{ nextcloud_token_auth_enforced }}"
      type: boolean
    - name: mail_from_address
      value: "{{ nextcloud_smtp_from | default(None) }}"
      when: "{{ nextcloud_smtp_from is defined }}"
    - name: mail_domain
      value: "{{ nextcloud_smtp_domain | default(None) }}"
      when: "{{ nextcloud_smtp_domain is defined }}"
    - name: mail_smtpauthtype
      value: "{{ nextcloud_smtp_authtype | default(None) }}"
      when: "{{ nextcloud_smtp_authtype is defined }}"
    - name: mail_smtpauth
      value: true
      type: boolean
      when: "{{ nextcloud_smtp_user is defined }}"
    - name: mail_smtphost
      value: "{{ nextcloud_smtp_host | default(None) }}"
      when: "{{ nextcloud_smtp_host is defined }}"
    - name: mail_smtpport
      value: "{{ nextcloud_smtp_port | default(None) }}"
      type: integer
      when: "{{ nextcloud_smtp_port is defined }}"
    - name: mail_smtpname
      value: "{{ nextcloud_smtp_user | default(None) }}"
      when: "{{ nextcloud_smtp_user is defined }}"
    - name: mail_smtppassword
      value: "{{ nextcloud_smtp_password | default(None) }}"
      when: "{{ nextcloud_smtp_password is defined }}"
    - name: mail_smtpsecure
      value: "{{ nextcloud_smtp_secure | default(None) }}"
      when: "{{ nextcloud_smtp_secure is defined }}"
    - name: upgrade.disable-web
      value: "{{ nextcloud_allow_web_update | bool | ternary('false', 'true') }}"
      type: boolean
    - name: default_phone_region
      value: "{{ nextcloud_country_code | default(None) }}"
      when: "{{ nextcloud_country_code is defined }}"

- name: Ensure OCC command Bash autocompletion is set for the nextcloud user
  lineinfile:
    path: /home/nextcloud/.bash_profile
    line: "{{ item }}"
    create: true
  become: true
  become_user: nextcloud
  with_items:
    - eval $(/var/www/nextcloud/occ _completion --generate-hook --program occ)
    - alias occ=/var/www/nextcloud/occ

- name: Ensure Nextcloud applications are installed
  command: "/usr/bin/php occ -n app:install {{ item }}"
  args:
    chdir: /var/www/nextcloud/
    creates: "/var/www/nextcloud/apps/{{ item }}/appinfo/info.xml"
  become: true
  become_user: nextcloud
  ignore_errors: true
  with_items: "{{ nextcloud_applications }}"

- name: Ensure Nextcloud applications are enabled
  command: "/usr/bin/php occ -n app:enable {{ item }}"
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  ignore_errors: true
  changed_when: false
  with_items: "{{ nextcloud_applications }}"

- name: Ensure Nextcloud encryption is enabled
  command: /usr/bin/php occ -n encryption:enable
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  changed_when: false
  when: '"encryption" in nextcloud_applications'

- name: Ensure the TURN/STUN server is configured in the Spreed application
  command: "/usr/bin/php occ -n config:app:set spreed {{ item }}"
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  changed_when: false
  with_items:
    - stun_servers --value='["{{ nextcloud_domain }}:3478"]'
    - turn_servers --value='[{"server":"{{ nextcloud_domain }}:3478","secret":"{{ nextcloud_coturn_secret }}","protocols":"udp,tcp"}]'
  when: '"spreed" in nextcloud_applications'

- name: Ensure user specified Nextcloud system configuration is set
  command: '/usr/bin/php occ -n config:system:set {{ item.name }}
            --value="{{ item.value }}"
            --type={{ item.type | default("string") }}'
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  ignore_errors: true
  changed_when: false
  with_items: "{{ nextcloud_system_config }}"

- name: Ensure user specified Nextcloud application configuration is set
  command: '/usr/bin/php occ -n config:app:set {{ item.name }}
            --value="{{ item.value }}"
            --type={{ item.type | default("string") }}'
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  ignore_errors: true
  changed_when: false
  with_items: "{{ nextcloud_applications_config }}"

- name: Ensure Nextcloud database is properly optimized
  command: "/usr/bin/php occ -n {{ item }}"
  args:
    chdir: /var/www/nextcloud/
  become: true
  become_user: nextcloud
  changed_when: false
  with_items:
    - maintenance:mode --on
    - db:add-missing-indices
    - db:add-missing-columns
    - db:add-missing-primary-keys
    - db:convert-filecache-bigint
    - maintenance:mode --off

- name: Ensure Nextcloud services are started and enabled at boot
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  with_items:
    - nextcloud_cron.timer
    - nextcloud_update.timer
